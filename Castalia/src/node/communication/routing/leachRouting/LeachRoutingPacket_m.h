//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/leachRouting/LeachRoutingPacket.msg.
//

#ifndef _LEACHROUTINGPACKET_M_H_
#define _LEACHROUTINGPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "RoutingPacket_m.h"
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/leachRouting/LeachRoutingPacket.msg:26</tt> by nedtool.
 * <pre>
 * enum LeachRoutingPacket_Type
 * {
 * 
 *     LEACH_ROUTING_ADV_PACKET = 1;
 *     LEACH_ROUTING_JOIN_PACKET = 2;
 *     LEACH_ROUTING_TDMA_PACKET = 3;
 *     LEACH_ROUTING_DATA_PACKET = 4;
 *     LEACH_ROUTING_DATA_SINGLE_PACKET = 5;
 *     LEACH_ROUTING_DATA_AGGREGATED_PACKET = 6;
 * }
 * </pre>
 */
enum LeachRoutingPacket_Type {
    LEACH_ROUTING_ADV_PACKET = 1,
    LEACH_ROUTING_JOIN_PACKET = 2,
    LEACH_ROUTING_TDMA_PACKET = 3,
    LEACH_ROUTING_DATA_PACKET = 4,
    LEACH_ROUTING_DATA_SINGLE_PACKET = 5,
    LEACH_ROUTING_DATA_AGGREGATED_PACKET = 6
};

/**
 * Class generated from <tt>src/node/communication/routing/leachRouting/LeachRoutingPacket.msg:36</tt> by nedtool.
 * <pre>
 * packet LeachRoutingPacket extends RoutingPacket
 * {
 *     int LeachRoutingPacketKind @enum(LeachRoutingPacket_Type);
 * }
 * </pre>
 */
class LeachRoutingPacket : public ::RoutingPacket
{
  protected:
    int LeachRoutingPacketKind_var;

  private:
    void copy(const LeachRoutingPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LeachRoutingPacket&);

  public:
    LeachRoutingPacket(const char *name=NULL, int kind=0);
    LeachRoutingPacket(const LeachRoutingPacket& other);
    virtual ~LeachRoutingPacket();
    LeachRoutingPacket& operator=(const LeachRoutingPacket& other);
    virtual LeachRoutingPacket *dup() const {return new LeachRoutingPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getLeachRoutingPacketKind() const;
    virtual void setLeachRoutingPacketKind(int LeachRoutingPacketKind);
};

inline void doPacking(cCommBuffer *b, LeachRoutingPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, LeachRoutingPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/node/communication/routing/leachRouting/LeachRoutingPacket.msg:42</tt> by nedtool.
 * <pre>
 * // XXX-albarc 15/06/18 - Different types of packets with different extra fields
 * packet LeachRoutingJoinPacket extends LeachRoutingPacket
 * {
 *     int priorityLevel;
 * }
 * </pre>
 */
class LeachRoutingJoinPacket : public ::LeachRoutingPacket
{
  protected:
    int priorityLevel_var;

  private:
    void copy(const LeachRoutingJoinPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LeachRoutingJoinPacket&);

  public:
    LeachRoutingJoinPacket(const char *name=NULL, int kind=0);
    LeachRoutingJoinPacket(const LeachRoutingJoinPacket& other);
    virtual ~LeachRoutingJoinPacket();
    LeachRoutingJoinPacket& operator=(const LeachRoutingJoinPacket& other);
    virtual LeachRoutingJoinPacket *dup() const {return new LeachRoutingJoinPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPriorityLevel() const;
    virtual void setPriorityLevel(int priorityLevel);
};

inline void doPacking(cCommBuffer *b, LeachRoutingJoinPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, LeachRoutingJoinPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/node/communication/routing/leachRouting/LeachRoutingPacket.msg:47</tt> by nedtool.
 * <pre>
 * packet LeachRoutingTDMAPacket extends LeachRoutingPacket
 * {
 *     int schedule[];
 * }
 * </pre>
 */
class LeachRoutingTDMAPacket : public ::LeachRoutingPacket
{
  protected:
    int *schedule_var; // array ptr
    unsigned int schedule_arraysize;

  private:
    void copy(const LeachRoutingTDMAPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LeachRoutingTDMAPacket&);

  public:
    LeachRoutingTDMAPacket(const char *name=NULL, int kind=0);
    LeachRoutingTDMAPacket(const LeachRoutingTDMAPacket& other);
    virtual ~LeachRoutingTDMAPacket();
    LeachRoutingTDMAPacket& operator=(const LeachRoutingTDMAPacket& other);
    virtual LeachRoutingTDMAPacket *dup() const {return new LeachRoutingTDMAPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setScheduleArraySize(unsigned int size);
    virtual unsigned int getScheduleArraySize() const;
    virtual int getSchedule(unsigned int k) const;
    virtual void setSchedule(unsigned int k, int schedule);
};

inline void doPacking(cCommBuffer *b, LeachRoutingTDMAPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, LeachRoutingTDMAPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/node/communication/routing/leachRouting/LeachRoutingPacket.msg:52</tt> by nedtool.
 * <pre>
 * packet LeachRoutingDataAggregatedPacket extends LeachRoutingPacket
 * {
 *     // Sources, seqNum y timestamp de los paquetes individuales agregados
 *     int indivSources[];
 *     int indivSeqNum[];
 *     simtime_t indivCreationTimestamp[];
 * }
 * </pre>
 */
class LeachRoutingDataAggregatedPacket : public ::LeachRoutingPacket
{
  protected:
    int *indivSources_var; // array ptr
    unsigned int indivSources_arraysize;
    int *indivSeqNum_var; // array ptr
    unsigned int indivSeqNum_arraysize;
    simtime_t *indivCreationTimestamp_var; // array ptr
    unsigned int indivCreationTimestamp_arraysize;

  private:
    void copy(const LeachRoutingDataAggregatedPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LeachRoutingDataAggregatedPacket&);

  public:
    LeachRoutingDataAggregatedPacket(const char *name=NULL, int kind=0);
    LeachRoutingDataAggregatedPacket(const LeachRoutingDataAggregatedPacket& other);
    virtual ~LeachRoutingDataAggregatedPacket();
    LeachRoutingDataAggregatedPacket& operator=(const LeachRoutingDataAggregatedPacket& other);
    virtual LeachRoutingDataAggregatedPacket *dup() const {return new LeachRoutingDataAggregatedPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setIndivSourcesArraySize(unsigned int size);
    virtual unsigned int getIndivSourcesArraySize() const;
    virtual int getIndivSources(unsigned int k) const;
    virtual void setIndivSources(unsigned int k, int indivSources);
    virtual void setIndivSeqNumArraySize(unsigned int size);
    virtual unsigned int getIndivSeqNumArraySize() const;
    virtual int getIndivSeqNum(unsigned int k) const;
    virtual void setIndivSeqNum(unsigned int k, int indivSeqNum);
    virtual void setIndivCreationTimestampArraySize(unsigned int size);
    virtual unsigned int getIndivCreationTimestampArraySize() const;
    virtual simtime_t getIndivCreationTimestamp(unsigned int k) const;
    virtual void setIndivCreationTimestamp(unsigned int k, simtime_t indivCreationTimestamp);
};

inline void doPacking(cCommBuffer *b, LeachRoutingDataAggregatedPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, LeachRoutingDataAggregatedPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _LEACHROUTINGPACKET_M_H_

